import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

import { IChat, IMessage } from '../../interfaces';

export interface AuthState {
  loading: boolean;
  chats: IChat[];
  selectedChat: IChat | null;
  messages: IMessage[];
}

const initialState: AuthState = {
  loading: false,
  chats: [],
  selectedChat: null,
  messages: [],
};

export const fetchChats = createAsyncThunk(
  'auth/fetchChats',
  async (_, thunkAPI) => {
    try {
      const { data } = await axios.get('/chat');
      return data;
    } catch (error: any) {
      console.log(error);
      return thunkAPI.rejectWithValue('error');
    }
  }
);

export const chatSlice = createSlice({
  name: 'chat',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchChats.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchChats.fulfilled, (state, action) => {
        state.chats = action.payload;
        state.loading = false;
      })
      .addCase(fetchChats.rejected, (state) => {
        state.loading = false;
      });
  },
});

// export const {} = authSlice.actions;

export default chatSlice.reducer;
